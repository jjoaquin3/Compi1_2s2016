
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Aug 05 02:37:37 CST 2016
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Acciones.ErrorT;
import Acciones.Token;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Aug 05 02:37:37 CST 2016
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\034\002\000\002\002" +
    "\004\000\002\002\004\000\002\002\002\000\002\003\004" +
    "\000\002\003\003\000\002\004\004\000\002\004\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\007\007\000\002\007\010\000\002\010" +
    "\007\000\002\010\010\000\002\011\006\000\002\011\007" +
    "\000\002\012\005\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\013\004\000\002\013\003\000\002\014" +
    "\003\000\002\014\003\000\002\016\011\000\002\016\010" +
    "\000\002\015\011\000\002\015\010\000\002\017\004\000" +
    "\002\017\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\021\006" +
    "\000\002\021\011\000\002\021\011\000\002\022\007\000" +
    "\002\023\004\000\002\024\005\000\002\024\003\000\002" +
    "\026\005\000\002\025\007\000\002\025\011\000\002\031" +
    "\007\000\002\032\007\000\002\033\007\000\002\030\006" +
    "\000\002\030\006\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\004\000\002\030\004\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\030\002\ufffd\003\004\034\000\035\000\036" +
    "\000\037\000\040\000\041\000\042\000\043\000\057\000" +
    "\001\002\000\030\002\ufffd\003\004\034\000\035\000\036" +
    "\000\037\000\040\000\041\000\042\000\043\000\057\000" +
    "\001\002\000\024\034\033\035\010\036\011\037\013\040" +
    "\015\041\031\042\017\043\021\057\025\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\012\042" +
    "\uffec\043\uffec\044\uffec\057\uffec\001\002\000\012\042\uffeb" +
    "\043\uffeb\044\uffeb\057\uffeb\001\002\000\020\002\ufffb\034" +
    "\033\035\010\036\011\037\013\040\015\041\031\001\002" +
    "\000\012\042\uffea\043\uffea\044\uffea\057\uffea\001\002\000" +
    "\004\002\uffff\001\002\000\012\042\uffe9\043\uffe9\044\uffe9" +
    "\057\uffe9\001\002\000\024\034\ufff9\035\ufff9\036\ufff9\037" +
    "\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\057\ufff9\001\002" +
    "\000\004\014\261\001\002\000\024\034\ufff7\035\ufff7\036" +
    "\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\057\ufff7" +
    "\001\002\000\004\014\255\001\002\000\012\042\237\043" +
    "\236\044\041\057\240\001\002\000\020\002\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\001\002\000" +
    "\020\002\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\001\002\000\004\004\232\001\002\000\020\002" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\001\002\000\024\034\033\035\010\036\011\037\013\040" +
    "\015\041\031\042\017\043\021\057\025\001\002\000\024" +
    "\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042" +
    "\ufff6\043\ufff6\057\ufff6\001\002\000\012\042\uffe8\043\uffe8" +
    "\044\uffe8\057\uffe8\001\002\000\024\034\ufff8\035\ufff8\036" +
    "\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\057\ufff8" +
    "\001\002\000\012\042\uffed\043\uffed\044\uffed\057\uffed\001" +
    "\002\000\024\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5" +
    "\041\ufff5\042\ufff5\043\ufff5\057\ufff5\001\002\000\020\002" +
    "\ufffc\034\033\035\010\036\011\037\013\040\015\041\031" +
    "\001\002\000\024\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040" +
    "\ufffa\041\ufffa\042\ufffa\043\ufffa\057\ufffa\001\002\000\006" +
    "\044\041\057\042\001\002\000\020\002\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\001\002\000\004" +
    "\010\224\001\002\000\004\010\043\001\002\000\004\011" +
    "\044\001\002\000\004\012\045\001\002\000\026\013\051" +
    "\042\056\043\057\045\070\046\062\047\066\050\064\051" +
    "\053\052\052\057\063\001\002\000\026\013\uffd7\042\uffd7" +
    "\043\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052" +
    "\uffd7\057\uffd7\001\002\000\006\005\222\006\221\001\002" +
    "\000\026\013\uffdc\042\uffdc\043\uffdc\045\uffdc\046\uffdc\047" +
    "\uffdc\050\uffdc\051\uffdc\052\uffdc\057\uffdc\001\002\000\020" +
    "\002\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\001\002\000\004\057\215\001\002\000\004\057\213" +
    "\001\002\000\026\013\uffde\042\uffde\043\uffde\045\uffde\046" +
    "\uffde\047\uffde\050\uffde\051\uffde\052\uffde\057\uffde\001\002" +
    "\000\026\013\uffd6\042\uffd6\043\uffd6\045\uffd6\046\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\052\uffd6\057\uffd6\001\002\000\004" +
    "\014\205\001\002\000\004\014\177\001\002\000\026\013" +
    "\uffda\042\uffda\043\uffda\045\uffda\046\uffda\047\uffda\050\uffda" +
    "\051\uffda\052\uffda\057\uffda\001\002\000\026\013\uffd8\042" +
    "\uffd8\043\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\057\uffd8\001\002\000\004\010\173\001\002\000" +
    "\010\004\170\005\uffcf\006\uffcf\001\002\000\024\010\141" +
    "\042\103\043\077\053\100\054\106\055\101\056\104\057" +
    "\076\060\102\001\002\000\026\013\uffdb\042\uffdb\043\uffdb" +
    "\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\057" +
    "\uffdb\001\002\000\004\010\135\001\002\000\026\013\uffd9" +
    "\042\uffd9\043\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\052\uffd9\057\uffd9\001\002\000\004\010\075\001\002" +
    "\000\026\013\uffdd\042\uffdd\043\uffdd\045\uffdd\046\uffdd\047" +
    "\uffdd\050\uffdd\051\uffdd\052\uffdd\057\uffdd\001\002\000\026" +
    "\013\073\042\056\043\057\045\070\046\062\047\066\050" +
    "\064\051\053\052\052\057\063\001\002\000\020\002\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\001" +
    "\002\000\026\013\uffdf\042\uffdf\043\uffdf\045\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\051\uffdf\052\uffdf\057\uffdf\001\002\000" +
    "\022\042\103\043\077\053\100\054\106\055\101\056\104" +
    "\057\076\060\102\001\002\000\046\007\uffb9\011\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\051\uffb9\001\002\000\004\014\132\001\002" +
    "\000\046\007\uffbd\011\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\051\uffbd\001" +
    "\002\000\046\007\uffbb\011\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\051\uffbb" +
    "\001\002\000\046\007\uffbe\011\uffbe\015\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\051" +
    "\uffbe\001\002\000\004\014\127\001\002\000\046\007\uffba" +
    "\011\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022" +
    "\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba" +
    "\031\uffba\032\uffba\033\uffba\051\uffba\001\002\000\024\011" +
    "\115\024\116\025\111\026\114\027\117\030\113\031\107" +
    "\032\110\033\112\001\002\000\046\007\uffbc\011\uffbc\015" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\051\uffbc\001\002\000\022\042\103\043\077" +
    "\053\100\054\106\055\101\056\104\057\076\060\102\001" +
    "\002\000\046\007\uffc0\011\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\051\uffc0" +
    "\001\002\000\022\042\103\043\077\053\100\054\106\055" +
    "\101\056\104\057\076\060\102\001\002\000\046\007\uffbf" +
    "\011\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\051\uffbf\001\002\000\022\042" +
    "\103\043\077\053\100\054\106\055\101\056\104\057\076" +
    "\060\102\001\002\000\022\042\103\043\077\053\100\054" +
    "\106\055\101\056\104\057\076\060\102\001\002\000\004" +
    "\007\122\001\002\000\022\042\103\043\077\053\100\054" +
    "\106\055\101\056\104\057\076\060\102\001\002\000\022" +
    "\042\103\043\077\053\100\054\106\055\101\056\104\057" +
    "\076\060\102\001\002\000\046\007\uffc3\011\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\030\113\031\107\032\110" +
    "\033\112\051\uffc3\001\002\000\046\007\uffc6\011\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\026\114\027\117\030\113\031\107\032" +
    "\110\033\112\051\uffc6\001\002\000\026\013\uffcb\042\uffcb" +
    "\043\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052" +
    "\uffcb\057\uffcb\001\002\000\046\007\uffc4\011\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\030\113\031\107\032\110" +
    "\033\112\051\uffc4\001\002\000\046\007\uffc2\011\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\110\033\112\051\uffc2\001\002\000\046\007\uffc5\011\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\026\114\027\117\030\113\031\107" +
    "\032\110\033\112\051\uffc5\001\002\000\046\007\uffc1\011" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\110\033\112\051\uffc1\001\002\000\022\042\103" +
    "\043\077\053\100\054\106\055\101\056\104\057\076\060" +
    "\102\001\002\000\024\015\131\024\116\025\111\026\114" +
    "\027\117\030\113\031\107\032\110\033\112\001\002\000" +
    "\046\007\uffc8\011\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\051\uffc8\001\002" +
    "\000\022\042\103\043\077\053\100\054\106\055\101\056" +
    "\104\057\076\060\102\001\002\000\024\015\134\024\116" +
    "\025\111\026\114\027\117\030\113\031\107\032\110\033" +
    "\112\001\002\000\046\007\uffc7\011\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\051\uffc7\001\002\000\022\042\103\043\077\053\100\054" +
    "\106\055\101\056\104\057\076\060\102\001\002\000\024" +
    "\011\137\024\116\025\111\026\114\027\117\030\113\031" +
    "\107\032\110\033\112\001\002\000\004\007\140\001\002" +
    "\000\026\013\uffc9\042\uffc9\043\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\051\uffc9\052\uffc9\057\uffc9\001\002\000\022" +
    "\042\103\043\077\053\100\054\106\055\101\056\104\057" +
    "\076\060\102\001\002\000\004\051\160\001\002\000\036" +
    "\016\144\017\147\020\151\021\146\022\145\023\150\024" +
    "\116\025\111\026\114\027\117\030\113\031\107\032\110" +
    "\033\112\001\002\000\022\042\103\043\077\053\100\054" +
    "\106\055\101\056\104\057\076\060\102\001\002\000\022" +
    "\042\103\043\077\053\100\054\106\055\101\056\104\057" +
    "\076\060\102\001\002\000\022\042\103\043\077\053\100" +
    "\054\106\055\101\056\104\057\076\060\102\001\002\000" +
    "\022\042\103\043\077\053\100\054\106\055\101\056\104" +
    "\057\076\060\102\001\002\000\022\042\103\043\077\053" +
    "\100\054\106\055\101\056\104\057\076\060\102\001\002" +
    "\000\022\042\103\043\077\053\100\054\106\055\101\056" +
    "\104\057\076\060\102\001\002\000\026\011\uffb5\024\116" +
    "\025\111\026\114\027\117\030\113\031\107\032\110\033" +
    "\112\051\uffb5\001\002\000\026\011\uffb4\024\116\025\111" +
    "\026\114\027\117\030\113\031\107\032\110\033\112\051" +
    "\uffb4\001\002\000\026\011\uffb7\024\116\025\111\026\114" +
    "\027\117\030\113\031\107\032\110\033\112\051\uffb7\001" +
    "\002\000\026\011\uffb6\024\116\025\111\026\114\027\117" +
    "\030\113\031\107\032\110\033\112\051\uffb6\001\002\000" +
    "\026\011\uffb3\024\116\025\111\026\114\027\117\030\113" +
    "\031\107\032\110\033\112\051\uffb3\001\002\000\026\011" +
    "\uffb8\024\116\025\111\026\114\027\117\030\113\031\107" +
    "\032\110\033\112\051\uffb8\001\002\000\004\057\161\001" +
    "\002\000\004\007\162\001\002\000\026\013\uffcd\042\uffcd" +
    "\043\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\057\uffcd\001\002\000\004\011\164\001\002\000\004" +
    "\051\165\001\002\000\004\057\166\001\002\000\004\007" +
    "\167\001\002\000\026\013\uffcc\042\uffcc\043\uffcc\045\uffcc" +
    "\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\057\uffcc\001" +
    "\002\000\022\042\103\043\077\053\100\054\106\055\101" +
    "\056\104\057\076\060\102\001\002\000\024\007\172\024" +
    "\116\025\111\026\114\027\117\030\113\031\107\032\110" +
    "\033\112\001\002\000\026\013\uffd5\042\uffd5\043\uffd5\045" +
    "\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\057\uffd5" +
    "\001\002\000\022\042\103\043\077\053\100\054\106\055" +
    "\101\056\104\057\076\060\102\001\002\000\024\011\175" +
    "\024\116\025\111\026\114\027\117\030\113\031\107\032" +
    "\110\033\112\001\002\000\004\007\176\001\002\000\026" +
    "\013\uffca\042\uffca\043\uffca\045\uffca\046\uffca\047\uffca\050" +
    "\uffca\051\uffca\052\uffca\057\uffca\001\002\000\022\042\103" +
    "\043\077\053\100\054\106\055\101\056\104\057\076\060" +
    "\102\001\002\000\024\015\201\024\116\025\111\026\114" +
    "\027\117\030\113\031\107\032\110\033\112\001\002\000" +
    "\004\004\202\001\002\000\022\042\103\043\077\053\100" +
    "\054\106\055\101\056\104\057\076\060\102\001\002\000" +
    "\024\007\204\024\116\025\111\026\114\027\117\030\113" +
    "\031\107\032\110\033\112\001\002\000\026\013\uffd3\042" +
    "\uffd3\043\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\057\uffd3\001\002\000\022\042\103\043\077\053" +
    "\100\054\106\055\101\056\104\057\076\060\102\001\002" +
    "\000\024\015\207\024\116\025\111\026\114\027\117\030" +
    "\113\031\107\032\110\033\112\001\002\000\004\004\210" +
    "\001\002\000\022\042\103\043\077\053\100\054\106\055" +
    "\101\056\104\057\076\060\102\001\002\000\024\007\212" +
    "\024\116\025\111\026\114\027\117\030\113\031\107\032" +
    "\110\033\112\001\002\000\026\013\uffd4\042\uffd4\043\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\057" +
    "\uffd4\001\002\000\004\007\214\001\002\000\026\013\uffce" +
    "\042\uffce\043\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051" +
    "\uffce\052\uffce\057\uffce\001\002\000\004\010\216\001\002" +
    "\000\004\011\217\001\002\000\004\007\220\001\002\000" +
    "\026\013\uffd2\042\uffd2\043\uffd2\045\uffd2\046\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\052\uffd2\057\uffd2\001\002\000\026\013" +
    "\uffd1\042\uffd1\043\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1" +
    "\051\uffd1\052\uffd1\057\uffd1\001\002\000\004\057\223\001" +
    "\002\000\010\005\uffd0\006\uffd0\007\uffd0\001\002\000\004" +
    "\011\225\001\002\000\004\012\226\001\002\000\026\013" +
    "\227\042\056\043\057\045\070\046\062\047\066\050\064" +
    "\051\053\052\052\057\063\001\002\000\020\002\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\001\002" +
    "\000\026\013\231\042\056\043\057\045\070\046\062\047" +
    "\066\050\064\051\053\052\052\057\063\001\002\000\020" +
    "\002\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\001\002\000\004\060\233\001\002\000\004\007\234" +
    "\001\002\000\024\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040" +
    "\ufff0\041\ufff0\042\ufff0\043\ufff0\057\ufff0\001\002\000\006" +
    "\005\222\007\254\001\002\000\004\014\250\001\002\000" +
    "\004\014\244\001\002\000\012\004\241\005\uffcf\007\uffcf" +
    "\010\043\001\002\000\004\060\242\001\002\000\004\007" +
    "\243\001\002\000\024\034\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\057\uffef\001\002\000" +
    "\004\060\245\001\002\000\004\015\246\001\002\000\004" +
    "\007\247\001\002\000\024\034\ufff3\035\ufff3\036\ufff3\037" +
    "\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\057\ufff3\001\002" +
    "\000\004\060\251\001\002\000\004\015\252\001\002\000" +
    "\004\007\253\001\002\000\024\034\ufff1\035\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\057\ufff1\001" +
    "\002\000\024\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\041\uffee\042\uffee\043\uffee\057\uffee\001\002\000\004\060" +
    "\256\001\002\000\004\015\257\001\002\000\004\007\260" +
    "\001\002\000\024\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\041\ufff2\042\ufff2\043\ufff2\057\ufff2\001\002\000\004" +
    "\060\262\001\002\000\004\015\263\001\002\000\004\007" +
    "\264\001\002\000\024\034\ufff4\035\ufff4\036\ufff4\037\ufff4" +
    "\040\ufff4\041\ufff4\042\ufff4\043\ufff4\057\ufff4\001\002\000" +
    "\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\006\002\005\034\004\001\001\000\006\002" +
    "\264\034\004\001\001\000\032\003\013\004\026\005\015" +
    "\006\021\007\031\010\017\011\027\012\033\013\011\014" +
    "\023\015\022\016\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\036\014\037\015\022\016\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\035\006\021" +
    "\007\031\010\017\011\027\012\033\013\034\014\023\015" +
    "\022\016\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\036\014\037\015\022\016\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\017\071\020\053\021\070\022\047\023\064\024" +
    "\046\025\057\026\066\031\060\032\045\033\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\141\030\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\020\073\021\070\022" +
    "\047\023\064\024\046\025\057\026\066\031\060\032\045" +
    "\033\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\125\001\001\000\002\001\001\000" +
    "\004\030\124\001\001\000\002\001\001\000\004\030\123" +
    "\001\001\000\004\030\122\001\001\000\002\001\001\000" +
    "\004\030\120\001\001\000\004\030\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\162\030\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\156\001\001\000\004\030\155\001\001\000\004\030\154" +
    "\001\001\000\004\030\153\001\001\000\004\030\152\001" +
    "\001\000\004\030\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\017\227\020\053\021\070\022\047\023\064\024" +
    "\046\025\057\026\066\031\060\032\045\033\054\001\001" +
    "\000\002\001\001\000\026\020\073\021\070\022\047\023" +
    "\064\024\046\025\057\026\066\031\060\032\045\033\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    public ArrayList<ErrorT> lista_errores;
    public ArrayList<Token> lista_reservadas;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
       
        lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
       
        lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {



    public void guardarReservada(String valor, int linea, int columna, String descripcion)
    {
        parser.lista_reservadas.add(new Token(valor, linea, columna, descripcion));
    }


  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // COND ::= EXP mayorigual EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // COND ::= EXP menorigual EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // COND ::= EXP mayor EXP 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // COND ::= EXP menor EXP 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // COND ::= EXP diferente EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COND ::= EXP igual2 EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= id 
            {
              Object RESULT =null;
		int iiddleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iiddright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String iidd = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= rfalse 
            {
              Object RESULT =null;
		int lugarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lugarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String lugar = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            guardarReservada("false",lugarright, lugarleft,"Valor logico falso");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= rtrue 
            {
              Object RESULT =null;
		int lugarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lugarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String lugar = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            guardarReservada("true",lugarright, lugarleft,"Valor logico verdadero");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= tchar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= tstring 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= EXP decremento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= EXP aumento 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= EXP potenciar EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= EXP modular EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= EXP dividir EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= EXP por EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= EXP menos EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= EXP mas EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= rheap acor EXP ccor 
            {
              Object RESULT =null;
		int lugarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lugarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object lugar = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            guardarReservada("heap",lugarright, lugarleft,"Monticulo Acceso a valor");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= rstack acor EXP ccor 
            {
              Object RESULT =null;
		int lugarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lugarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object lugar = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            guardarReservada("heap",lugarright, lugarleft,"Pila Acceso a valor");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PRINTI ::= printi apar EXP cpar fin 
            {
              Object RESULT =null;
		int lugarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lugarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object lugar = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
            guardarReservada("printi",lugarright, lugarleft,"Reservada de impresion de enteros");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINTI",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PRINTS ::= prints apar EXP cpar fin 
            {
              Object RESULT =null;
		int lugarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lugarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object lugar = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
            guardarReservada("prints",lugarright, lugarleft,"Reservada de impresion de cadenas");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINTS",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PRINTF ::= printf apar EXP cpar fin 
            {
              Object RESULT =null;
		int lugarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lugarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object lugar = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
            guardarReservada("printf",lugarright, lugarleft,"Reservada de impresion de flotantes");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PRINTF",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF ::= rif apar COND cpar rgoto id fin 
            {
              Object RESULT =null;
		int lugar1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int lugar1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object lugar1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lugar2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lugar2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object lugar2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            guardarReservada("if",lugar1right, lugar1left,"Reservada para el flujo de contro if");
            guardarReservada("if", lugar2right, lugar2left,"Indicador de Salto condicional");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IF ::= rif COND rgoto id fin 
            {
              Object RESULT =null;
		int lugar1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lugar1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object lugar1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lugar2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lugar2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String lugar2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            guardarReservada("if",lugar1right, lugar1left,"Reservada para el flujo de contro if");
            guardarReservada("goto",lugar2right, lugar2left,"Indicador de Salto condicional");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SALTO ::= rgoto id fin 
            {
              Object RESULT =null;
		int lugarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lugarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object lugar = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            guardarReservada("goto",lugarright, lugarleft,"Indicador de Salto incondicional");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SALTO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LIST ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LIST",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LIST ::= LIST coma id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LIST",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ET ::= LIST dosp 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ET",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CALL ::= rcall id apar cpar fin 
            {
              Object RESULT =null;
		int lugarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lugarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object lugar = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
            guardarReservada("call",lugarright, lugarleft,"Reservada para llamadas a metodos");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CALL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIG ::= rheap acor EXP ccor igual1 EXP fin 
            {
              Object RESULT =null;
		int lugarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int lugarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object lugar = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		
            guardarReservada("heap",lugarright, lugarleft,"Monticulo Asignacion de valor");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIG ::= rstack acor EXP ccor igual1 EXP fin 
            {
              Object RESULT =null;
		int lugarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int lugarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object lugar = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		
            guardarReservada("stack",lugarright, lugarleft,"Pila Asignacion de valor");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIG ::= id igual1 EXP fin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENT ::= PRINTI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENT ::= PRINTS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENT ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENT ::= SALTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENT ::= IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENT ::= ET 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENT ::= CALL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENT ::= ASIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENT",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BLOCK ::= SENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOCK",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BLOCK ::= BLOCK SENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOCK",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NORMAL ::= TIPO id apar cpar alla clla 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NORMAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NORMAL ::= TIPO id apar cpar alla BLOCK clla 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NORMAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MAIN ::= TIPO rmain apar cpar alla clla 
            {
              Object RESULT =null;
		int lugarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lugarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object lugar = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
            guardarReservada("main",lugarright, lugarleft,"rservada para metodo principal");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MAIN",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MAIN ::= TIPO rmain apar cpar alla BLOCK clla 
            {
              Object RESULT =null;
		int lugarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lugarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object lugar = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		
            guardarReservada("main",lugarright, lugarleft,"rservada para metodo principal");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MAIN",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // METODO ::= NORMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // METODO ::= MAIN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // METODOS ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // METODOS ::= METODOS METODO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO ::= rbool 
            {
              Object RESULT =null;
		int lugarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lugarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object lugar = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            guardarReservada("bool",lugarright, lugarleft,"reservada tipo bool");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO ::= rchar 
            {
              Object RESULT =null;
		int lugarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lugarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object lugar = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            guardarReservada("char",lugarright, lugarleft,"reservada tipo char");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO ::= rstring 
            {
              Object RESULT =null;
		int lugarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lugarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object lugar = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            guardarReservada("string",lugarright, lugarleft,"reservada tipo string");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO ::= rdouble 
            {
              Object RESULT =null;
		int lugarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lugarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object lugar = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            guardarReservada("double",lugarright, lugarleft,"reservada tipo double");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO ::= rint 
            {
              Object RESULT =null;
		int lugarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lugarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object lugar = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            guardarReservada("int",lugarright, lugarleft,"reservada tipo int");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO ::= rvoid 
            {
              Object RESULT =null;
		int lugarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lugarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object lugar = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            guardarReservada("void",lugarright, lugarleft,"reservada tipo void");
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TEMPORALES ::= TIPO LIST fin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TEMPORALES",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PUNTERO ::= TIPO id igual1 numero fin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PUNTERO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PUNTERO ::= id igual1 numero fin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PUNTERO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // HEAP ::= TIPO rheap acor numero ccor fin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("HEAP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // HEAP ::= rheap acor numero ccor fin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("HEAP",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STACK ::= TIPO rstack acor numero ccor fin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("STACK",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STACK ::= rstack acor numero ccor fin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("STACK",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION ::= TEMPORALES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION ::= PUNTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION ::= HEAP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION ::= STACK 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACIONES ::= DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= METODOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= DECLARACIONES METODOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error INICIO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 CUERPO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        //RESULT = algo;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

        //lista_reservadasB = parser.archivoA.lista_reservadas;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

