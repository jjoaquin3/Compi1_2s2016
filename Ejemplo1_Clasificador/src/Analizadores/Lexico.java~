/* The following code was generated by JFlex 1.6.1 */

/*----------------------------------------------------------------------------
--------------------- 1ra. Area: Codigo de Usuario
----------------------------------------------------------------------------*/

//-------> Paquete, importaciones

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import Acciones.ErrorT;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Analizadores/lexico.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENT_SIMPLE = 2;
  public static final int COMENT_MULTI = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  9, 11, 10, 10,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    52, 22,  3,  0,  0, 27,  0,  4, 16, 17,  8, 25, 13, 26,  2,  7, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 14, 15, 24, 12, 23,  0, 
     0, 46, 37, 44, 33, 39, 51, 43, 45, 32,  5, 48, 38, 50, 34, 30, 
    49,  5, 42, 41, 35, 36, 29,  5,  5,  5,  5, 20,  0, 21, 28,  6, 
     0, 46, 37, 44, 33, 39, 51, 43, 45, 32,  5, 48, 38, 50, 34, 30, 
    49,  5, 42, 41, 35, 36, 29,  5,  5,  5,  5, 18,  0, 19,  0,  0, 
     0,  0,  0,  0,  0, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\1\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\3\1\1\4\3\1\1\6\3\1\27\1\30"+
    "\1\27\2\0\1\31\1\0\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\3\1\0\1\43"+
    "\1\3\1\43\3\3\1\0\7\3\1\2\1\0\1\3"+
    "\2\44\3\3\2\0\6\3\1\0\1\3\1\0\1\3"+
    "\2\45\2\3\1\46\2\0\2\3\1\47\1\50\1\51"+
    "\1\52\1\0\1\3\2\53\1\3\2\0\1\54\1\3"+
    "\1\54\1\0\1\3\1\55\1\0\2\56\1\57\1\60"+
    "\1\61\1\57\1\60\1\61\2\0\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\237\0\237\0\u01dd\0\237\0\237\0\237\0\237"+
    "\0\237\0\237\0\237\0\237\0\237\0\u0212\0\u0247\0\u027c"+
    "\0\u02b1\0\u02e6\0\237\0\237\0\u031b\0\u0350\0\u0385\0\u03ba"+
    "\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562"+
    "\0\u0597\0\237\0\237\0\u05cc\0\u0601\0\u0109\0\237\0\u013e"+
    "\0\237\0\237\0\237\0\237\0\237\0\237\0\237\0\237"+
    "\0\237\0\u0636\0\u066b\0\237\0\u06a0\0\u0173\0\u06d5\0\u070a"+
    "\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2"+
    "\0\u08e7\0\u0601\0\u091c\0\u0951\0\237\0\u0173\0\u0986\0\u09bb"+
    "\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63"+
    "\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\237\0\u0173\0\u0ca1"+
    "\0\u0cd6\0\u0173\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0173\0\u0173"+
    "\0\u0173\0\u0173\0\u0ddf\0\u0e14\0\237\0\u0173\0\u0e49\0\u0e7e"+
    "\0\u0eb3\0\237\0\u0ee8\0\u0173\0\u0f1d\0\u0f52\0\u0173\0\u0f87"+
    "\0\237\0\u0173\0\237\0\237\0\237\0\u0173\0\u0173\0\u0173"+
    "\0\u0fbc\0\u0ff1\0\237";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\7\1\10\1\4\1\11"+
    "\1\12\2\13\1\0\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\10\1\36\1\37"+
    "\1\40\1\10\1\41\1\10\1\42\2\10\1\43\1\44"+
    "\1\10\1\45\1\46\1\47\1\10\1\4\1\10\1\50"+
    "\1\51\1\10\1\13\11\52\1\53\63\52\1\54\2\52"+
    "\1\0\51\52\66\0\1\5\1\55\62\0\3\56\1\57"+
    "\61\56\4\60\1\61\60\60\1\0\1\10\3\0\2\10"+
    "\26\0\2\10\1\0\10\10\1\0\6\10\1\0\4\10"+
    "\10\0\1\62\1\63\70\0\1\64\12\0\1\65\1\66"+
    "\50\0\1\67\64\0\1\65\64\0\1\66\101\0\1\70"+
    "\65\0\1\71\33\0\1\10\3\0\2\10\26\0\1\10"+
    "\1\72\1\0\10\10\1\0\6\10\1\0\4\10\43\0"+
    "\1\73\20\0\1\74\2\0\1\10\3\0\2\10\26\0"+
    "\2\10\1\0\2\10\1\75\5\10\1\0\6\10\1\0"+
    "\3\10\1\76\2\0\1\10\3\0\2\10\26\0\1\10"+
    "\1\77\1\0\10\10\1\0\6\10\1\0\4\10\2\0"+
    "\1\10\3\0\2\10\26\0\2\10\1\0\10\10\1\0"+
    "\4\10\1\100\1\10\1\0\4\10\2\0\1\10\3\0"+
    "\2\10\26\0\1\10\1\101\1\0\10\10\1\0\6\10"+
    "\1\0\4\10\44\0\1\102\22\0\1\10\3\0\2\10"+
    "\26\0\2\10\1\0\3\10\1\103\4\10\1\0\6\10"+
    "\1\0\4\10\2\0\1\10\3\0\2\10\26\0\1\10"+
    "\1\104\1\0\10\10\1\0\6\10\1\0\4\10\2\0"+
    "\1\10\3\0\2\10\26\0\2\10\1\0\10\10\1\0"+
    "\4\10\1\105\1\106\1\0\4\10\2\0\1\10\3\0"+
    "\2\10\26\0\2\10\1\0\7\10\1\107\1\0\6\10"+
    "\1\0\4\10\2\0\1\10\3\0\2\10\26\0\2\10"+
    "\1\0\10\10\1\0\1\10\1\110\4\10\1\0\4\10"+
    "\2\0\1\10\3\0\2\10\26\0\2\10\1\0\10\10"+
    "\1\0\5\10\1\111\1\0\4\10\10\0\1\53\56\0"+
    "\1\112\64\0\1\10\3\0\2\10\26\0\2\10\1\113"+
    "\1\114\7\10\1\0\6\10\1\0\4\10\44\0\1\115"+
    "\22\0\1\10\3\0\2\10\26\0\2\10\1\0\3\10"+
    "\1\116\4\10\1\0\6\10\1\0\4\10\2\0\1\10"+
    "\3\0\2\10\26\0\2\10\1\0\4\10\1\117\3\10"+
    "\1\0\6\10\1\0\4\10\2\0\1\10\3\0\2\10"+
    "\26\0\2\10\1\0\7\10\1\120\1\0\6\10\1\0"+
    "\4\10\2\0\1\10\3\0\2\10\26\0\1\10\1\121"+
    "\1\0\10\10\1\0\6\10\1\0\4\10\53\0\1\122"+
    "\3\0\1\123\7\0\1\10\3\0\2\10\26\0\2\10"+
    "\1\0\10\10\1\0\1\10\1\124\3\10\1\125\1\0"+
    "\4\10\2\0\1\10\3\0\2\10\26\0\2\10\1\0"+
    "\3\10\1\126\4\10\1\0\6\10\1\0\4\10\2\0"+
    "\1\10\3\0\2\10\26\0\2\10\1\0\10\10\1\0"+
    "\5\10\1\127\1\0\4\10\2\0\1\10\3\0\2\10"+
    "\26\0\2\10\1\0\6\10\1\130\1\10\1\0\6\10"+
    "\1\0\4\10\2\0\1\10\3\0\2\10\26\0\2\10"+
    "\1\0\10\10\1\0\5\10\1\131\1\0\4\10\2\0"+
    "\1\10\3\0\2\10\26\0\2\10\1\132\1\133\7\10"+
    "\1\0\6\10\1\0\4\10\2\0\1\10\3\0\2\10"+
    "\26\0\2\10\1\134\1\135\7\10\1\0\6\10\1\0"+
    "\4\10\42\0\1\136\24\0\1\10\3\0\2\10\26\0"+
    "\2\10\1\0\1\10\1\137\6\10\1\0\6\10\1\0"+
    "\4\10\2\0\1\10\3\0\2\10\26\0\2\10\1\0"+
    "\5\10\1\140\2\10\1\0\6\10\1\0\4\10\2\0"+
    "\1\10\3\0\2\10\26\0\2\10\1\0\2\10\1\141"+
    "\5\10\1\0\6\10\1\0\4\10\2\0\1\10\3\0"+
    "\2\10\26\0\2\10\1\0\6\10\1\142\1\10\1\0"+
    "\6\10\1\0\4\10\40\0\2\143\100\0\1\144\11\0"+
    "\1\10\3\0\2\10\26\0\2\10\1\143\1\145\7\10"+
    "\1\0\6\10\1\0\4\10\2\0\1\10\3\0\2\10"+
    "\26\0\2\10\1\0\10\10\1\0\3\10\1\146\2\10"+
    "\1\0\4\10\2\0\1\10\3\0\2\10\26\0\1\10"+
    "\1\147\1\0\10\10\1\0\6\10\1\0\4\10\2\0"+
    "\1\10\3\0\2\10\26\0\2\10\1\0\10\10\1\0"+
    "\1\10\1\150\4\10\1\0\4\10\2\0\1\10\3\0"+
    "\2\10\26\0\2\10\1\0\6\10\1\151\1\10\1\0"+
    "\6\10\1\0\4\10\2\0\1\10\3\0\2\10\26\0"+
    "\2\10\1\0\10\10\1\0\6\10\1\0\1\10\1\152"+
    "\2\10\43\0\1\153\23\0\1\10\3\0\2\10\26\0"+
    "\2\10\1\0\2\10\1\154\5\10\1\0\6\10\1\0"+
    "\4\10\43\0\1\155\23\0\1\10\3\0\2\10\26\0"+
    "\2\10\1\0\2\10\1\156\5\10\1\0\6\10\1\0"+
    "\4\10\2\0\1\10\3\0\2\10\26\0\2\10\1\0"+
    "\6\10\1\157\1\10\1\0\6\10\1\0\4\10\2\0"+
    "\1\10\3\0\2\10\26\0\2\10\1\0\10\10\1\0"+
    "\6\10\1\0\4\10\1\160\42\0\1\161\101\0\2\162"+
    "\5\0\1\10\3\0\2\10\26\0\2\10\1\0\2\10"+
    "\1\163\5\10\1\0\6\10\1\0\4\10\2\0\1\10"+
    "\3\0\2\10\26\0\2\10\1\0\10\10\1\0\6\10"+
    "\1\162\1\164\3\10\44\0\1\165\22\0\1\10\3\0"+
    "\2\10\26\0\2\10\1\0\3\10\1\166\4\10\1\0"+
    "\6\10\1\0\4\10\2\0\1\10\3\0\2\10\26\0"+
    "\2\10\1\0\7\10\1\167\1\0\6\10\1\0\4\10"+
    "\54\0\1\170\64\0\1\171\12\0\1\10\3\0\2\10"+
    "\26\0\2\10\1\0\10\10\1\0\2\10\1\172\3\10"+
    "\1\0\4\10\40\0\2\173\7\0\2\174\11\0\1\175"+
    "\2\0\1\10\3\0\2\10\26\0\2\10\1\173\1\176"+
    "\7\10\1\174\1\177\5\10\1\0\3\10\1\200\37\0"+
    "\1\201\71\0\1\202\57\0\1\203\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4134];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\5\1\2\11\1\1\11\11\5\1\2\11"+
    "\15\1\2\11\1\1\2\0\1\11\1\0\11\11\1\1"+
    "\1\0\1\11\5\1\1\0\10\1\1\0\1\1\1\11"+
    "\4\1\2\0\6\1\1\0\1\1\1\0\1\1\1\11"+
    "\4\1\2\0\6\1\1\0\1\1\1\11\2\1\2\0"+
    "\1\11\2\1\1\0\2\1\1\0\1\11\1\1\3\11"+
    "\3\1\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<ErrorT> lista_errores;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico: <<"+yytext()+">> ["+yyline+" , "+yycolumn+"]");
                                lista_errores.add(new ErrorT(yytext(),yyline,yycolumn,"Error Lexico","Lexema Invalido"));
            }
          case 50: break;
          case 2: 
            { System.out.println("Reconocido: <<"+yytext()+">>, numero ");
                                return new Symbol(Simbolos.numero, yycolumn, yyline, yytext());
            }
          case 51: break;
          case 3: 
            { System.out.println("Reconocido: <<"+yytext()+">>, id ");
                                return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
            }
          case 52: break;
          case 4: 
            { System.out.println("Reconocido: <<"+yytext()+">>, dividir");
                            return new Symbol(Simbolos.dividir, yycolumn, yyline, yytext());
            }
          case 53: break;
          case 5: 
            { System.out.println("Reconocido: <<"+yytext()+">>, por");
                            return new Symbol(Simbolos.por, yycolumn, yyline, yytext());
            }
          case 54: break;
          case 6: 
            { /* ignore white space. */
            }
          case 55: break;
          case 7: 
            { System.out.println("Reconocido: <<"+yytext()+">>, igual1");
                            return new Symbol(Simbolos.igual1, yycolumn, yyline, yytext());
            }
          case 56: break;
          case 8: 
            { System.out.println("Reconocido: <<"+yytext()+">>, coma");
                            return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
            }
          case 57: break;
          case 9: 
            { System.out.println("Reconocido: <<"+yytext()+">>, dosp");
                            return new Symbol(Simbolos.dosp, yycolumn, yyline, yytext());
            }
          case 58: break;
          case 10: 
            { System.out.println("Reconocido: <<"+yytext()+">>, fin");
                            return new Symbol(Simbolos.fin, yycolumn, yyline, yytext());
            }
          case 59: break;
          case 11: 
            { System.out.println("Reconocido: <<"+yytext()+">>, apar");
                            return new Symbol(Simbolos.apar, yycolumn, yyline, yytext());
            }
          case 60: break;
          case 12: 
            { System.out.println("Reconocido: <<"+yytext()+">>, cpar");
                            return new Symbol(Simbolos.cpar, yycolumn, yyline, yytext());
            }
          case 61: break;
          case 13: 
            { System.out.println("Reconocido: <<"+yytext()+">>, alla");
                            return new Symbol(Simbolos.alla, yycolumn, yyline, yytext());
            }
          case 62: break;
          case 14: 
            { System.out.println("Reconocido: <<"+yytext()+">>, clla");
                            return new Symbol(Simbolos.clla, yycolumn, yyline, yytext());
            }
          case 63: break;
          case 15: 
            { System.out.println("Reconocido: <<"+yytext()+">>, acor");
                            return new Symbol(Simbolos.acor, yycolumn, yyline, yytext());
            }
          case 64: break;
          case 16: 
            { System.out.println("Reconocido: <<"+yytext()+">>, ccor");
                            return new Symbol(Simbolos.ccor, yycolumn, yyline, yytext());
            }
          case 65: break;
          case 17: 
            { System.out.println("Reconocido: <<"+yytext()+">>, mayor1");
                            return new Symbol(Simbolos.mayor, yycolumn, yyline, yytext());
            }
          case 66: break;
          case 18: 
            { System.out.println("Reconocido: <<"+yytext()+">>, menor1");
                            return new Symbol(Simbolos.menor, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 19: 
            { System.out.println("Reconocido: <<"+yytext()+">>, mas");
                            return new Symbol(Simbolos.mas, yycolumn, yyline, yytext());
            }
          case 68: break;
          case 20: 
            { System.out.println("Reconocido: <<"+yytext()+">>, menos");
                            return new Symbol(Simbolos.menos, yycolumn, yyline, yytext());
            }
          case 69: break;
          case 21: 
            { System.out.println("Reconocido: <<"+yytext()+">>, modular");
                            return new Symbol(Simbolos.modular, yycolumn, yyline, yytext());
            }
          case 70: break;
          case 22: 
            { System.out.println("Reconocido: <<"+yytext()+">>, potenciar");
                            return new Symbol(Simbolos.potenciar, yycolumn, yyline, yytext());
            }
          case 71: break;
          case 23: 
            { 
            }
          case 72: break;
          case 24: 
            { yybegin(YYINITIAL);
            }
          case 73: break;
          case 25: 
            { System.out.println("Reconocido: <<"+yytext()+">>, tstring ");
                                return new Symbol(Simbolos.tstring, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 26: 
            { System.out.println("Reconocido: <<"+yytext()+">>, tchar ");
                                return new Symbol(Simbolos.tchar, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 27: 
            { yybegin(COMENT_SIMPLE);
            }
          case 76: break;
          case 28: 
            { yybegin(COMENT_MULTI);
            }
          case 77: break;
          case 29: 
            { System.out.println("Reconocido: <<"+yytext()+">>, igual2");
                            return new Symbol(Simbolos.igual2, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 30: 
            { System.out.println("Reconocido: <<"+yytext()+">>, mayorigual");
                            return new Symbol(Simbolos.mayorigual, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 31: 
            { System.out.println("Reconocido: <<"+yytext()+">>, menorigual");
                            return new Symbol(Simbolos.menorigual, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 32: 
            { System.out.println("Reconocido: <<"+yytext()+">>, diferente");
                            return new Symbol(Simbolos.diferente, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 33: 
            { System.out.println("Reconocido: <<"+yytext()+">>, aumento");
                            return new Symbol(Simbolos.aumento, yycolumn, yyline, yytext());
            }
          case 82: break;
          case 34: 
            { System.out.println("Reconocido: <<"+yytext()+">>, decremento");
                            return new Symbol(Simbolos.decremento, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 35: 
            { System.out.println("Reconocido: <<"+yytext()+">>, rif");
                                return new Symbol(Simbolos.rif, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 36: 
            { System.out.println("Reconocido: <<"+yytext()+">>, rint");
                            return new Symbol(Simbolos.rint, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 37: 
            { System.out.println("Reconocido: <<"+yytext()+">>, rvoid");
                            return new Symbol(Simbolos.rvoid, yycolumn, yyline, yytext());
            }
          case 86: break;
          case 38: 
            { System.out.println("Reconocido: <<"+yytext()+">>, rbool");
                            return new Symbol(Simbolos.rbool, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 39: 
            { System.out.println("Reconocido: <<"+yytext()+">>, rgoto");
                                return new Symbol(Simbolos.rgoto, yycolumn, yyline, yytext());
            }
          case 88: break;
          case 40: 
            { System.out.println("Reconocido: <<"+yytext()+">>, rchar");
                            return new Symbol(Simbolos.rchar, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 41: 
            { System.out.println("Reconocido: <<"+yytext()+">>, rcall");
                                return new Symbol(Simbolos.rcall, yycolumn, yyline, yytext());
            }
          case 90: break;
          case 42: 
            { System.out.println("Reconocido: <<"+yytext()+">>, rheap");
                                return new Symbol(Simbolos.rheap, yycolumn, yyline, yytext());
            }
          case 91: break;
          case 43: 
            { System.out.println("Reconocido: <<"+yytext()+">>, rmain");
                                return new Symbol(Simbolos.rmain, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 44: 
            { System.out.println("Reconocido: <<"+yytext()+">>, rstack");
                                return new Symbol(Simbolos.rstack, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 45: 
            { System.out.println("Reconocido: <<"+yytext()+">>, rdouble");
                            return new Symbol(Simbolos.rdouble, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 46: 
            { System.out.println("Reconocido: <<"+yytext()+">>, rstring");
                            return new Symbol(Simbolos.rstring, yycolumn, yyline, yytext());
            }
          case 95: break;
          case 47: 
            { System.out.println("Reconocido: <<"+yytext()+">>, printi");
                                return new Symbol(Simbolos.printi, yycolumn, yyline, yytext());
            }
          case 96: break;
          case 48: 
            { System.out.println("Reconocido: <<"+yytext()+">>, prints");
                                return new Symbol(Simbolos.prints, yycolumn, yyline, yytext());
            }
          case 97: break;
          case 49: 
            { System.out.println("Reconocido: <<"+yytext()+">>, printf");
                                return new Symbol(Simbolos.printf, yycolumn, yyline, yytext());
            }
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
